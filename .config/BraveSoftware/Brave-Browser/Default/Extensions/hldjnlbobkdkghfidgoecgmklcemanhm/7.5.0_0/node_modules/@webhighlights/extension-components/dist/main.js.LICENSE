/******/

// webpackBootstrap

/***/

// Module

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/

// css base code, injected by the css-loader

// return the list of modules as css string

// Adapted from convert-source-map (MIT)

// import a list of modules into the list

// skip already imported module

// this implementation is not 100% perfect for weird media query combinations

// when a module is imported multiple times with different media queries.

// I hope this will never occur (Hey this way we have smaller bundles)

// EXPORTS

/* binding */

// CONCATENATED MODULE: ../../node_modules/symbol-observable/es/index.js

/* module decorator */

/* harmony default export */

// CONCATENATED MODULE: ../../node_modules/symbol-observable/es/ponyfill.js

// @ts-nocheck

/*
  
     NOTE: Originally the script is coming from the @webcomponents/custom-elements library.
     Some adjustments needed to be made to prevent duplicated elements.
     For that we also check whether there is already a given element with a shadowRoot in the DOM.
    
     Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
     This code may only be used under the BSD style license found at
     http://polymer.github.io/LICENSE.txt The complete set of authors may be found
     at http://polymer.github.io/AUTHORS.txt The complete set of contributors may
     be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by
     Google as part of the polymer project is also subject to an additional IP
     rights grant found at http://polymer.github.io/PATENTS.txt
    */

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

// join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4

// Unique ID creation requires a high quality random # generator.  In the

// browser this is a little complicated due to unknown quality of Math.random()

// and inconsistent support for the `crypto` API.  We do the best we can via

// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto

// implementation. Also, find the complete implementation of crypto on IE11.

// WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto

// eslint-disable-line no-undef

// Math.random()-based (RNG)

//

// If all else fails, use Math.random().  It's fast, but is of unspecified

// quality.

// See https://github.com/uuidjs/uuid for API details

// node and clockseq need to be initialized to random values if they're not

// specified.  We do this lazily to minimize issues related to insufficient

// system entropy.  See #189

// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)

// Per 4.2.2, randomize (14 bit) clockseq

// UUID timestamps are 100 nano-second units since the Gregorian epoch,

// (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so

// time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'

// (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.

// Per 4.2.1.2, use count of uuid's generated during the current clock

// cycle to simulate higher resolution clock

// Per 4.2.1.2 Throw error if too many uuids are requested

// Per 4.2.1.2, Bump clockseq on clock regression

// Reset nsecs if clock regresses (new clockseq) or we've moved onto a new

// time interval

// `time_low`

// Per 4.1.4 - Convert from unix epoch to Gregorian epoch

// `time_mid`

// `time_high_and_version`

// include version

// `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

// `clock_seq_low`

// `node`

// Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

// Copy bytes to buffer, if provided

/*! web-highlighter v0.7.4 https://github.com/alienzhou/web-highlighter */

//# sourceMappingURL=web-highlighter.min.js.map

/*! For license information please see index.js.LICENSE.txt */

/** @class */

/*return*/

// Always also set the jwt in the local storage

/**
     * Notifies Content script that something changed
     * @param requestId - id of the event which is defined in public-interfaces.ts
     */

/**
     * Notifies Background script that something changed
     * @param requestId - id of the event which is defined in public-interfaces.ts
     */

/**
 * Darkens or lightens a color:
 *
 * Example lighten: shadeColor("#63C6FF",40);
 * Example darken: shadeColor("#63C6FF",-40);
 *
 * Source: https://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors
 *
 * lighten:
 * @param color
 * @param percent
 * @returns
 */

/**
 *
 *
 * @export
 * @param {string} color - HEX color
 * @param {number} percent - E.g 0.5 = 50%
 * @return {*}
 */

// console.log('TODAY', today, 'REMINDER', reminderDueDate, reminderDueDate < today);

// E.g. August 28, 2021

/**
 * E.g.
 * Input: Jan 09 2023 17:35:23
 * Output: Jan 09 2023 18:00:00
 *
 * @export
 * @param {Date} date - Date that should be set to full hours
 * @param {boolean} [roundHoursUp=true] If true, rounds hours up
 * @return {*}  {Date} Returns new date object
 */

// We want to return a new date object and don't want mess with the original object

// Shoelace components

/**
 * Modules that are defined in the webpack-config as "externals" need to be provided here
 */

// @ts-ignore

/*break*/

/*yield*/

// Make fallbackUrl the default url to make future requests faster

// tslint:disable-next-line: no-empty

/**
     *
     * @param relUrl relative url to fetch request
     */

/**
     * Tries to get the jwt-token either from the chrome storage or localstorage
     *
     * @returns {Promise<JwtPayload>}
     * @memberof JwtService
     */

/**
 *
 * ⌃⇧⌘S -> ["⌃", "⇧", "⌘", "S"]
 * Alt+B -> ["Alt", "B"]
 */

/**
 * Don't call this function from the server as it will get the country from the timezone.
 * (Will always be the same for the server)
 */

/**
 *
 * Getting country code from the user's timezone
 * https://codepen.io/diego-fortes/pen/YzEPxYw
 */

/**
 * If you pass a countryCode it will simply read the country name from the list.
 * If you don't pass a countryCode it will try to get the country from the timezone.
 *
 * @param countryCode - Always pass for server as otherwise it will get the country from the timezone.
 * @returns
 */

// startMeta: {

//   parentTagName: "H1",

//   parentIndex: 0,

//   textOffset: 0

// },

// endMeta: {

//   textOffset: 24

//   parentTagName: "CODE",

//   textOffset: 6

//   textOffset: 19

//   textOffset: 28

/**
 * Extracts the range out of an rangyObject
 *
 * Example: type:textContent|4588$4591$8$highlight$ -> {start: 4588, end: 4591}
 * @param rangyObject - E.g. type:textContent|4588$4591$8$highlight$
 */

/**
     * Signs the user in and saves the result in the chromeJwtService.
     *
     * @returns {Promise<string>}
     * @memberof UserService
     */

/**
     * Signs up the user. A jwt token will be the result so that the user gets logged in directly
     *
     * @returns {Promise<string>}
     * @memberof UserService
     */

/**
 *
 * @param {Mark["highlightSource"]} highlightSource - E.g. { parentTagName: "SPAN", parentIndex: 313, textOffset: 6 }
 * @return Example returns index: 313.6
 */

/**
 * Normally, we ignore query parameters.
 *
 * But, there are cases when the query param needs to be taken into account.
 *
 * Cases:
 * - PDF`s (*.pdf)
 * - Exceptions:
 *        1. Google Search
 *        2. Youtube Watch
 *        3. If URL includes GUID (e.g. autodesk.com?guid=123)
 *
 * @param url - url to check
 * @returns
 */

/**
 * If this element exists, the extension is installed
 */

/**
 *
 *
 * @export
 * @param {Array<keyof Mark>} props - Props that should be returned from database
 * @return {*}  {string} - Returns string that can passed as a 'selectedFields' query param to server
 */

/**
 *
 * E.g.
 * Input: 'createdAt+_user+text'
 * ->
 * Output 'createdAt _user text'
 * @export
 * @param {string} [param]
 * @return {*}
 */

// Just to be safe

/**
 *
 * @param url - Url to be checked against pattern
 * @param pattern - Will be transformed to pattern liket his:
 * - Wildcard pattern: ^(?:www.|(?:http|https|ftp|ftps|chrome|file|):\/\/(?:www.|))web-highlights.com\/home\/*
 * @returns true or fale
 */

// Restrict to specific url

// 7 Days

/* harmony export */

//# sourceMappingURL=jwt-decode.esm.js.map

// node_modules/lit-html/directive.js

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */

/* harmony import */

// src/styles/component.styles.ts

// src/internal/slot.ts

// src/internal/default-value.ts

// CONCATENATED MODULE: ../../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.B2DPRLWS.js

// src/utilities/base-path.ts

// CONCATENATED MODULE: ../../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.5S5G5ZT7.js

// src/components/icon/library.default.ts

// src/internal/event.ts

/* unused harmony exports registerTranslation, en_default */

// node_modules/@shoelace-style/localize/dist/index.js

/* @__PURE__ */

// src/utilities/localize.ts

// src/internal/watch.ts

/* .__spreadValues */

/* unused harmony exports registerIconLibrary, unregisterIconLibrary */

/* .library_default_default */

/* .library_system_default */

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */

// node_modules/lit-html/static.js

/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */

// src/components/icon/library.system.ts

/* unused harmony export SlPopup */

// node_modules/@floating-ui/core/dist/floating-ui.core.browser.min.mjs

/* .__spreadProps */

/* .__objRest */

// node_modules/@floating-ui/dom/dist/floating-ui.dom.browser.min.mjs

// src/components/popup/popup.ts

/* .ShoelaceElement */

/* .popup_styles_default */

/* .__decorateClass */

/* unused harmony export __export */

/* unused harmony exports o, SlIcon */

// node_modules/lit-html/directives/unsafe-svg.js

/* .watchIcon */

/* .unwatchIcon */

/* .getIconLibrary */

/* .requestIcon */

// src/components/icon/icon.ts

/* .icon_styles_default */

/* .watch */

/* unused harmony export setAnimation */

// src/utilities/animation-registry.ts

/* unused harmony export shimKeyframesHeightAuto */

// src/internal/animate.ts

/* unused harmony export e3 */

// node_modules/@lit/reactive-element/decorators/property.js

// node_modules/@lit/reactive-element/decorators/state.js

// node_modules/@lit/reactive-element/decorators/base.js

// node_modules/@lit/reactive-element/decorators/query.js

// node_modules/@lit/reactive-element/decorators/query-async.js

// src/internal/shoelace-element.ts

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */

// src/components/icon/request.ts

/* .requestInclude */

// src/internal/form.ts

// src/components/include/request.ts

// node_modules/@lit/reactive-element/css-tag.js

// node_modules/@lit/reactive-element/reactive-element.js

// node_modules/lit-element/lit-element.js

/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */

/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */

// src/styles/form-control.styles.ts

/* .component_styles_default */

// node_modules/lit-html/directives/if-defined.js

// ESM COMPAT FLAG

/* reexport */

// EXTERNAL MODULE: ../../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.REMPD76R.js

/* component_styles_default */

/* ShoelaceElement */

/* FormSubmitController */

/* HasSlotController */

/* LocalizeController */

// EXTERNAL MODULE: ../../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.2POSCD3A.js

/* __decorateClass */

/* watch */

// CONCATENATED MODULE: ../../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.I3ZRMLNX.js

// src/components/spinner/spinner.styles.ts

// EXTERNAL MODULE: ../../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.LVDKOCCK.js

// EXTERNAL MODULE: ../../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.EPLF65HA.js

// CONCATENATED MODULE: ../../node_modules/@shoelace-style/shoelace/dist/components/button/button.js

// EXTERNAL MODULE: ../../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.TL6KDKGI.js

// CONCATENATED MODULE: ../../node_modules/@shoelace-style/shoelace/dist/components/divider/divider.js

// EXTERNAL MODULE: ../../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.VZ5IUWKY.js

/* form_control_styles_default */

// node_modules/lit-html/directives/live.js

/* defaultValue */

// CONCATENATED MODULE: ../../node_modules/@shoelace-style/shoelace/dist/components/input/input.js

/* getTextContent */

// CONCATENATED MODULE: ../../node_modules/@shoelace-style/shoelace/dist/components/menu-item/menu-item.js

// CONCATENATED MODULE: ../../node_modules/@shoelace-style/shoelace/dist/components/menu-label/menu-label.js

// CONCATENATED MODULE: ../../node_modules/@shoelace-style/shoelace/dist/components/menu/menu.js

// CONCATENATED MODULE: ../../node_modules/@shoelace-style/shoelace/dist/components/option/option.js

// CONCATENATED MODULE: ../../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.H262HIXG.js

// src/internal/offset.ts

// src/internal/scroll.ts

// EXTERNAL MODULE: ../../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.5A5FP7Q5.js

/* stopAnimations */

/* getAnimation */

/* animateTo */

/* waitForEvent */

/* setDefaultAnimation */

// CONCATENATED MODULE: ../../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.ZDQ7HCAX.js

// src/components/tag/tag.styles.ts

// EXTERNAL MODULE: ../../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.L2TAZOBJ.js

// EXTERNAL MODULE: ../../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.WC7XO65M.js

// CONCATENATED MODULE: ../../node_modules/@shoelace-style/shoelace/dist/components/select/select.js

/* parseDuration */

// CONCATENATED MODULE: ../../node_modules/@shoelace-style/shoelace/dist/components/tooltip/tooltip.js

// CONCATENATED MODULE: ../../node_modules/lit/node_modules/@lit/reactive-element/css-tag.js

//# sourceMappingURL=css-tag.js.map

// CONCATENATED MODULE: ../../node_modules/lit/node_modules/@lit/reactive-element/reactive-element.js

// CONCATENATED MODULE: ../../node_modules/lit/node_modules/lit-html/lit-html.js

//# sourceMappingURL=lit-html.js.map

// CONCATENATED MODULE: ../../node_modules/@lit/reactive-element/reactive-element.js

// CONCATENATED MODULE: ../../node_modules/lit-html/lit-html.js

// CONCATENATED MODULE: ../../node_modules/lit-element/lit-element.js

// CONCATENATED MODULE: ../../node_modules/lit/node_modules/lit-html/is-server.js

//# sourceMappingURL=is-server.js.map

// CONCATENATED MODULE: ../../node_modules/lit/index.js

//# sourceMappingURL=index.js.map

/************************************************************************/

// The module cache

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// Return the exports of the module

// Flag the module as loaded

/* webpack/runtime/compat get default export */

// getDefaultExport function for compatibility with non-harmony modules

// define getter functions for harmony exports

// define __esModule on exports

// This entry need to be wrapped in an IIFE because it need to be in strict mode.

// EXTERNAL MODULE: ./src/content-scripts/polyfills.ts

// EXTERNAL MODULE: ../shared-lib/dist/external-modules/index.js

// CONCATENATED MODULE: ../../node_modules/pwa-helpers/connect-mixin.js

/**
@license
Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/

/**
  This is a JavaScript mixin that you can use to connect a Custom Element base
  class to a Redux store. The `stateChanged(state)` method will be called when
  the state is updated.

  Example:

      import { connect } from 'pwa-helpers/connect-mixin.js';

      class MyElement extends connect(store)(HTMLElement) {
        stateChanged(state) {
          this.textContent = state.data.count.toString();
        }
      }
*/

/**
     * The `stateChanged(state)` method will be called when the state is updated.
     */

//# sourceMappingURL=connect-mixin.js.map

// EXTERNAL MODULE: ../../node_modules/symbol-observable/es/index.js + 1 modules

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

// CONCATENATED MODULE: ./src/store/reducer.ts

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

// This action has a similiar effect to ActionTypes.INIT.

// Any reducers that existed in both the new and old rootReducer

// will receive the previous state. This effectively populates

// the new state tree with any relevant data from the old one.

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/* default */

// When a store is created, an "INIT" action is dispatched so that every

// reducer returns their initial state. This effectively populates

// the initial state tree.

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

// EXTERNAL MODULE: ../shared-lib/dist/index.js

// EXTERNAL MODULE: ../../node_modules/uuid/index.js

// Check if URL is pdf format => Return the filename by splitting the URL

// Split by forward- or backslash

// Remove spaces %20 for windows

// CONCATENATED MODULE: ./src/environments/environment.dev.ts

// CONCATENATED MODULE: ./src/services/bookmark.service.ts

// Update redux

// CONCATENATED MODULE: ./src/store/actions.ts

/**
 * Hand a tab as a param to set selected tag
 *
 * @export
 * @param {Tab} activeView
 * @param {string} [tag]
 */

// CONCATENATED MODULE: ./src/services/tags.service.ts

/**
     * Updates a tag and reloads all tags from server for state management
     *
     * @param {Tag} tag
     * @memberof TagsService
     */

// EXTERNAL MODULE: ../../node_modules/lit/index.js + 8 modules

// CONCATENATED MODULE: ../../node_modules/lit/node_modules/@lit/reactive-element/decorators/custom-element.js

//# sourceMappingURL=custom-element.js.map

//# sourceMappingURL=property.js.map

// CONCATENATED MODULE: ../../node_modules/lit/node_modules/@lit/reactive-element/decorators/query.js

//# sourceMappingURL=base.js.map

//# sourceMappingURL=query.js.map

// CONCATENATED MODULE: ../../node_modules/lit/node_modules/@lit/reactive-element/decorators/query-assigned-elements.js

// CONCATENATED MODULE: ./src/components/popup-toolbox/popup-toolbox.component.ts

// If changes, also change SCSS

/**
         *  Necessary to abort hide animation when user enters mark again
         *
         * @memberof MyMarkerElement
         */

// CONCATENATED MODULE: ./src/helper/urlHelper.ts

// CONCATENATED MODULE: ./src/helper/colorHelper.ts

// CONCATENATED MODULE: ./src/components/notifications/text-notification/text-notification.component.ts

// CONCATENATED MODULE: ./src/components/notifications/pdf-local-file-info-notification/pdf-local-file-info-notification.component.ts

// CONCATENATED MODULE: ./src/components/notifications/notifications.component.ts

// If true, the closing of the notification is overwritten by another notification

// CONCATENATED MODULE: ./src/components/notifications/notification.service.ts

// CONCATENATED MODULE: ./src/helper/page-render-helper.ts

// see if DOM is already available

// call on next available tick

/**
             *
             * - Custom Event is triggered in viewer.js
             */

// EXTERNAL MODULE: ../../node_modules/web-highlighter/dist/web-highlighter.min.js

/*#__PURE__*/

/**
 *  This method loads all marks for current url from server
 *
 * @todo Load only marks with current url from server
 *
 * @memberof WebMarker
 */

/**
 * If @param text is given the mark is created by the context menu
 *
 * @export
 * @param {string} [text]
 * @returns {Mark}
 */

// Try to recreate highlight manually by searching for the text

// We can not use the original highlightSource id as it changed when recreating it

// Unwraps the mark element

// move all children out of the element

// remove the empty element

/**
 * Adds the style for the mark element.
 *
 */

// CONCATENATED MODULE: ./src/services/marker.service.ts

// Reload bookmarks to update for changes (If first mark on page is made, bookmark will be created)

// Reload bookmarks to update for changes (If last mark gets deleted, bookmark will be deleted if not starred)

// CONCATENATED MODULE: ./src/components/marker/app.component.ts

/**
         * Can be set to true to hide side-bar icon. E.g. in full screen mode
         *
         * @memberof Marker
         */

/**
         * Set width of menu in px to calculate center.
         * Only for making new marks.
         *
         * @memberof Marker
         */

// Do not block event loop

/**
     * Hides the icon on fullscreen mode
     *
     * @memberof Marker
     */

// Chrome extension not available

/**
     * Listens for click and selection events to show or hide the marker
     *
     * @memberof Marker
     */

/**
     *  Sets the position of the marker for a click event.
     *  Gets the center from the bounds of the createdRange
     *
     * @param {MouseEvent} e
     * @memberof Marker
     */

// True, if it is a real mouse up click

// Not trusted events are needed for especially testing

// CONCATENATED MODULE: ./src/components/popup-toolbox/my-menu/my-menu.component.ts

/**
     * Updates the highlight color of this mark
     * @param color - new color
     */

/** Update color of related elements */

/** Only update server when input changed and not only input which is only changed in client for demonstration purposes */

// Prevents opening links when removing marks

/**
     * This method creates the mark in the browser. The id will be given to element after server created element.
     *
     * @param {MouseEvent}
     * @memberof MyMarkElement
     */

/**
     * Deletes the mark in state manegement. The markerHelper is listening for
     * state changes to remove the mark from the DOM
     *
     * @memberof MyMarkElement
     */

/* tslint:disable: max-line-length */

// CONCATENATED MODULE: ./src/components/shared/bronco-chip/app.component.ts

/**
 * Modern chip
 * @event clicked - Dispatches when chip is clicked.
 * @event removed - Dispatched when removed is clicked.
 * @slot - Default content.
 * @cssprop --primary-color - Background color
 * @cssprop --height - Height of the chip
 *
 */

/**
         *
         * If true, trash icon will be shown with red background
         * @type {boolean}
         * @memberof BroncoChip
         */

/**
         *
         * If true, trash icon will not be shown
         * @type {boolean}
         * @memberof BroncoChip
         */

/**
         *
         * Makes the chip outlined
         * @type {boolean}
         * @memberof BroncoChip
         */

/**
         * Enables the outline effect after clicking
         * @type {boolean}
         * @memberof BroncoChip
         */

// CONCATENATED MODULE: ./src/components/shared/bronco-chip-list/app.component.ts

/**
         * Array of tags as strings
         *
         * @memberof BroncoChipList
         */

/**
         * This value will be set from the autoComplete component.
         * When the user submits and this value is truthy, it will be used to add the tag
         *
         * @memberof BroncoChipList
         */

/**
         * Property to set focus on input initially
         *
         * @memberof BroncoChipList
         */

/**
         * Property to prevent to fast deleting. So that user has to click backspace twice.
         *
         * @memberof BroncoChipList
         */

/**
         * Property to trigger submit after entering ENTER twice
         *
         * @memberof BroncoChipList
         */

/**
         * Current value for input for auto-complete
         *
         * @memberof BroncoChipList
         */

/**
     * Listen to keyboard event to either add or remove tags
     * Tags are being added when user enters space or enter
     *
     * @param {KeyboardEvent} e
     * @memberof BroncoChipList
     */

// Stop Propagation not for arrow doww / arrow up and enter because auto complete listens for those events

// Either take the current autoComplete value or the inputElement value

/**
     * Adds a tag if current value is not empty.
     * It splits the current value by space
     *
     * @param {HTMLInputElement} target
     * @memberof BroncoChipList
     */

// Map array to lower case to check case insensitive if tag already exists

/**
     * Deletes a tag if it is already marked as deleted.
     *
     * @param {HTMLInputElement} target
     * @memberof BroncoChipList
     */

/**
     * Event triggered by the custom auto-complete component.
     *
     * If user clicks on autocomplete it has to be manually added. If user presses enter it will be captured by
     * the event listener of the inputElement.
     *
     * @param {CustomEvent} e
     * @param {boolean} [isClick]
     * @memberof BroncoChipList
     */

// CONCATENATED MODULE: ./src/components/shared/bronco-chip-list/auto-complete/auto-complete.component.ts

/**
         * Maximum of shown suggestions in dropdown
         *
         * @type {5}
         * @memberof AutoCompleteComponent
         */

// Key arrow down

// Key arrow up

/**
     * Remove event handler
     *
     * @memberof AutoCompleteComponent
     */

// this.selectedIndex = -1;

// CONCATENATED MODULE: ./src/components/shared/bronco-chip-list/chip-list-item/chip-list-item.component.ts

/**
         * Active, when user selects item in autocomplete
         *
         * @memberof ChipListItemComponent
         */

// CONCATENATED MODULE: ./src/components/shared/shortcut-tooltip/index.ts

// CONCATENATED MODULE: ./src/components/sidebar/app.component.ts

/**
     * Function called by content script, when user logs out in browser action popup
     *
     * @memberof LobbyContainer
     */

// CONCATENATED MODULE: ./src/components/sidebar/tab-bar/tab-bar.component.ts

/**
 *
 * This component is a liquid tabbar 'stolen' from https://codepen.io/marius2502/pen/rNBoeBz.
 *
 * It allows the user to login.
 *
 * @export
 * @class SignInComponent
 * @extends {LitElement}
 */

// CONCATENATED MODULE: ./src/components/sidebar/action-toolbar/action-toolbar.component.ts

/**
         * When set to true, it hides the delete icon
         *
         * @memberof BookmarkElementComponent
         */

/**
     * Either @event goToMatk or @event deleted
     *
     * @param {string} eventName
     * @memberof BookmarkElementComponent
     */

// CONCATENATED MODULE: ./src/components/sidebar/mark-badge/mark-badge.component.ts

// CONCATENATED MODULE: ./src/components/sidebar/header-toggle/header-toggle.component.ts

// CONCATENATED MODULE: ./src/components/sidebar/accordion-view/accordion-view.component.ts

// CONCATENATED MODULE: ./src/components/sidebar/origin-overview/origin-overview.component.ts

// Load data initially when data is not loaded yet

/**
     * Filter origins by search
     *
     * @memberof TagsViewComponent
     */

// CONCATENATED MODULE: ./src/components/sidebar/origin-element/origin-element.component.ts

/**
     * This method toggles the dropdown icon of the element. The timeout is necessary to wait for the animation to be completed.
     *
     * @memberof TreeViewComponent
     */

/**
         * This method toggles the dropdown icon of the element.
         * Fix: If it is the fist item in the list, this is not necessary because it disappears otherwise.
         */

// CONCATENATED MODULE: ./src/components/sidebar/bookmark-overview/bookmark-overview.component.ts

// Filter if search value is given

// CONCATENATED MODULE: ./src/components/sidebar/mark-element/mark-element.component.ts

/**
 *
 * This component shows one single mark
 *
 * It allows the user to login.
 *
 * @export
 * @class MarkElementComponent
 * @extends {LitElement}
 */

/**
       * When set to true, only marks for current page are shown
       */

/**
     * This is a fallback if the mark could not be created in the current page.
     */

// CONCATENATED MODULE: ./src/components/sidebar/bookmark-element/bookmark-element.component.ts

/**
         * Either the dropdown is active or not
         *
         * @memberof BookmarkElementComponent
         */

/**
     * Creates a new bookmark when clicking on bookmark icon
     *
     * @memberof BookmarkElementComponent
     */

/**
    * This method toggles the dropdown icon of the element. The timeout is necessary to wait for the animation to be
    completed.
    *
    * @memberof TreeViewComponent
    */

// CONCATENATED MODULE: ./src/components/sidebar/mark-overview/mark-overview.component.ts

/**
 *
 * This shows all marks and can be filtered by the filterValue
 *
 * @export
 * @class MarkOverviewComponent
 * @extends {LitElement}
 */

/**
         * When set to true, only marks for current page are shown
         */

// Filter for current page if mode is set to currentPage

// Filter for current bookmark, if given

// CONCATENATED MODULE: ./src/components/sidebar/tags-view/tags-view.component.ts

/**
     * Find related tags, which are inserted in combination with selected tag
     *
     * @returns
     * @memberof TagsViewComponent
     */

/**
     * Toggle tag in state management
     *
     * @param {string} tag
     * @memberof TagsViewComponent
     */

/**
     * Filter tags by search
     *
     * @memberof TagsViewComponent
     */

// CONCATENATED MODULE: ./src/components/sidebar/search-view/search-view.component.ts

// CONCATENATED MODULE: ./src/components/sidebar/shortcut-overview/index.ts

// CONCATENATED MODULE: ./src/components/sidebar/sidebar-footer/index.ts

// If server fails, at least it works locally in chrome storage

// CONCATENATED MODULE: ./src/content-scripts/chrome-mocks.ts

/**
 * Mocks the chrome.storage API for development.
 *
 * @class ChromeStorageSyncMock
 */

// CONCATENATED MODULE: ./src/content-scripts/content-helper.ts

// CONCATENATED MODULE: ./src/components/sidebar/column-resizer/index.ts

// CONCATENATED MODULE: ./src/components/sidebar/main-component/main-component.component.ts

/**
 *
 *
 * @export
 * @class MarkOverviewComponent
 * @extends {LitElement}
 */

/**
         * Current active Tab, saved in store
         *
         * @memberof MarkOverviewComponent
         */

/**
         * If true, the animation is active
         *
         * @memberof MarkOverviewComponent
         */

// CONCATENATED MODULE: ./src/components/shared/loading-spinner/loading-spinner.component.ts

// CONCATENATED MODULE: ./src/components/browser-action-mock/browser-action-mock.ts

// EXTERNAL MODULE: ../shared-components/dist/clipboard-button/index.js

// EXTERNAL MODULE: ../shared-components/dist/cookie-policy/index.js

// For testing in development where chrome storage is not available

// Pass token to query params for dev testing

// Set JWT token in client-app if user is signed into extension

// Do not reload on feed route to prevent infinite reloading

// Listeners for all websites (also web app)

// CONCATENATED MODULE: ./src/index.ts

/**
 * @shared-components webpack config declares
 * external modules, that need to be:
 * 1. imported in the main application
 * 2. available in the global scope
 */

// Extension components

// Shared components
